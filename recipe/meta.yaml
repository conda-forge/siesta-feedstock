{% set name = "siesta" %}
{% set siesta_version = "4.1-b4" %}
{% set version_base = siesta_version.split("-b")[0] %}
{% set version = version_base + ".0" %}
{% set sha256 = "e0316067e7cc0df027b66c339e4624d00de9fd606fad1cede791f300ce160c72" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  fn: {{ name }}-v{{ siesta_version }}.tar.bz2
  url: https://gitlab.com/siesta-project/{{ name }}/-/archive/v{{ siesta_version }}/siesta-v{{ siesta_version }}.tar.bz2
  sha256: {{ sha256 }}

# Default build version to be stepped with every new build!
{% set build = 0 %}

# Define build matrix for MPI vs. non-mpi
## ensure mpi is defined (needed for conda-smithy recipe-lint)
{% set mpi = mpi or 'nompi' %}
{% if mpi == 'nompi' %}
# prioritize nompi variant via build number
{% set build = build + 1000 %}
{% endif %}

{% if mpi != 'nompi' %}
{% set mpi_prefix = "mpi_" + mpi %}
{% else %}
{% set mpi_prefix = "nompi" %}
{% endif %}

build:
  number: {{ build }}
  skip: true  # [win]

  string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ build }}"

  run_exports:
    - {{ name }}

requirements:
  build:
    - {{ compiler('fortran') }}
    - {{ compiler('c') }}
    - make  # [not win]
  host:
    - libblas
    - liblapack
    - {{ mpi }}  # [mpi != 'nompi']
    - zlib
    - fox
    - scalapack  # [mpi != 'nompi']
    # need to list hdf5, libnetcdf and netcdf-fortran twice to get version
    # pinning from conda_build_config and build pinning from {{ mpi_prefix }}
    - hdf5
    - hdf5 * {{ mpi_prefix }}_*
    - libnetcdf
    - libnetcdf * {{ mpi_prefix }}_*
    - netcdf-fortran
    - netcdf-fortran * {{ mpi_prefix }}_*
  run:
    - {{ mpi }}  # [mpi != 'nompi']
    - zlib
    - fox
    - scalapack  # [mpi != 'nompi']
    - hdf5 * {{ mpi_prefix }}_*
    - libnetcdf * {{ mpi_prefix }}_*
    - netcdf-fortran * {{ mpi_prefix }}_*

test:
  source_files:
    - Tests/**

about:
  home: https://gitlab.com/siesta-project
  license: GPL-3
  license_family: GPL
  license_file: COPYING
  summary: A first-principles materials simulation code using DFT
  description: |
    SIESTA is both a method and its computer program implementation,
    to perform efficient electronic structure calculations and ab initio
    molecular dynamics simulations of molecules and solids. SIESTA's
    efficiency stems from the use of strictly localized basis sets and
    from the implementation of linear-scaling algorithms which can be
    applied to suitable systems. A very important feature of the code is
    that its accuracy and cost can be tuned in a wide range, from quick
    exploratory calculations to highly accurate simulations matching the
    quality of other approaches, such as plane-wave and all-electron methods.
  dev_url: https://gitlab.com/siesta-project/siesta

extra:
  recipe-maintainers:
    - zerothi
    - albgar
    - jan-janssen
