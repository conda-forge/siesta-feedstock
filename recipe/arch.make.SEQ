.SUFFIXES:
.SUFFIXES: .f .F .o .c .a .f90 .F90

SIESTA_ARCH = unknown

CC = %CC%
FC = %FC%
FC_SERIAL = %FC%
FPP := $(FC_SERIAL) -E -P -x c

CFLAGS = %CFLAGS%
FFLAGS = %FFLAGS%

AR = %AR%
RANLIB = %RANLIB%

SYS = nag

SP_KIND = 4
DP_KIND = 8
KINDS = $(SP_KIND) $(DP_KIND)

COMP_LIBS =

FPPFLAGS = -DFC_HAVE_ABORT -DCDF
FPPFLAGS += -DNCDF -DNCDF_4

LIBS = -llapack -lblas
LIBS += -lnetcdff -lnetcdf -lhdf5_hl -lhdf5 -lz

# fake-handler for ol-stm
FFTW_ROOT=.
NETCDF_LIBS += -lnetcdff -lnetcdf -lhdf5_hl -lhdf5 -lz

INCFLAGS = %INCFLAGS%

LDFLAGS = %LDFLAGS%

# Dependency rules ---------

# -g -O1   # your appropriate flags here...
FFLAGS_DEBUG = %FFLAGS_DEBUG%

# The atom.f code is very vulnerable. Particularly the Intel compiler
# will make an erroneous compilation of atom.f with high optimization
# levels.
atom.o: atom.F
	$(FC) -c $(FFLAGS_DEBUG) $(INCFLAGS) $(FPPFLAGS) $(FPPFLAGS_fixed_F) $< 

.c.o:
	$(CC) -c $(CFLAGS) $(INCFLAGS) $(CPPFLAGS) $< 
.F.o:
	$(FC) -c $(FFLAGS) $(INCFLAGS) $(FPPFLAGS) $(FPPFLAGS_fixed_F)  $< 
.F90.o:
	$(FC) -c $(FFLAGS) $(INCFLAGS) $(FPPFLAGS) $(FPPFLAGS_free_F90) $< 
.f.o:
	$(FC) -c $(FFLAGS) $(INCFLAGS) $(FCFLAGS_fixed_f)  $<
.f90.o:
	$(FC) -c $(FFLAGS) $(INCFLAGS) $(FCFLAGS_free_f90)  $<
