diff --git a/CMakeLists.txt b/CMakeLists.txt
index 877616b70..ade6d879f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -32,6 +32,7 @@ include(GNUInstallDirs)
 
 # Include Siesta specific utility functions
 include(SiestaUtils)
+include(SiestaConda)
 siesta_util_ensure_out_of_source_build()
 
 if(PROJECT_IS_TOP_LEVEL)
diff --git a/Config/cmake/SiestaConda.cmake b/Config/cmake/SiestaConda.cmake
new file mode 100644
index 000000000..a4166063b
--- /dev/null
+++ b/Config/cmake/SiestaConda.cmake
@@ -0,0 +1,39 @@
+# utility package to detect conda builds
+
+set(SIESTA_conda_build "$ENV{CONDA_BLD_PATH}")
+
+
+if(NOT SIESTA_conda_build)
+  message(STATUS "Not doing a conda-build")
+
+  macro(siesta_conda_fix var)
+  endmacro()
+string(REPLACE "$SIESTA_CONDA_BUILD_PREFIX"
+  "<build-prefix>"
+  Fortran_PPFLAGS_CURRENT_multiline
+  "${Fortran_PPFLAGS_CURRENT_multiline}")
+
+  # Equivalent to PREFIX in conda-builds
+  set(SIESTA_conda_PREFIX "" CACHE STRING "conda-build specifies the PREFIX variable")
+
+  return()
+endif()
+
+message(STATUS "Doing a conda-build")
+list(APPEND CMAKE_MESSAGE_INDENT "  ")
+
+# Equivalent to PREFIX in conda-builds
+set(SIESTA_conda_PREFIX "$ENV{PREFIX}" CACHE STRING "conda-build specifies the PREFIX variable")
+
+macro(siesta_conda_fix var)
+  string(REPLACE "$PREFIX"
+    "<prefix>"
+    ${var} "${${var}}"
+  )
+  string(REPLACE "${SIESTA_conda_PREFIX}"
+    "<prefix>"
+    ${var} "${${var}}"
+  )
+endmacro()
+
+list(POP_BACK CMAKE_MESSAGE_INDENT)
diff --git a/Src/CMakeLists.txt b/Src/CMakeLists.txt
index 811be80bf..3a5a12e76 100644
--- a/Src/CMakeLists.txt
+++ b/Src/CMakeLists.txt
@@ -711,6 +711,7 @@ siesta_get_multiline(LENGTH 128
   Fortran_FLAGS_CURRENT
   OUTPUT Fortran_FLAGS_CURRENT_multiline
   )
+siesta_conda_fix(Fortran_FLAGS_CURRENT_multiline)
 
 # This isn't used since it may contain generator
 # expressions, and the multiline method can cut it
@@ -725,6 +726,7 @@ siesta_get_multiline(LENGTH 128
   Fortran_PPFLAGS_CURRENT
   OUTPUT Fortran_PPFLAGS_CURRENT_multiline
   )
+siesta_conda_fix(Fortran_PPFLAGS_CURRENT_multiline)
 
 # Create version file with the version string implemented
 # TODO this will only be generated at cmake generation, i.e.
diff --git a/Util/TS/PHtrans/CMakeLists.txt b/Util/TS/PHtrans/CMakeLists.txt
index c7ad33c75..c535a9e70 100644
--- a/Util/TS/PHtrans/CMakeLists.txt
+++ b/Util/TS/PHtrans/CMakeLists.txt
@@ -215,6 +215,7 @@ siesta_get_multiline(LENGTH 128
   Fortran_FLAGS_CURRENT
   OUTPUT Fortran_FLAGS_CURRENT_multiline
   )
+siesta_conda_fix(Fortran_FLAGS_CURRENT_multiline)
 
 # This isn't used since it may contain generator
 # expressions, and the multiline method can cut it
@@ -229,6 +230,7 @@ siesta_get_multiline(LENGTH 128
   Fortran_PPFLAGS_CURRENT
   OUTPUT Fortran_PPFLAGS_CURRENT_multiline
   )
+siesta_conda_fix(Fortran_PPFLAGS_CURRENT_multiline)
 
 # Create version file with the version string implemented
 # TODO this will only be generated at cmake generation, i.e.
diff --git a/Util/TS/TBtrans/CMakeLists.txt b/Util/TS/TBtrans/CMakeLists.txt
index 3e4441873..0e8a23aa8 100644
--- a/Util/TS/TBtrans/CMakeLists.txt
+++ b/Util/TS/TBtrans/CMakeLists.txt
@@ -209,6 +209,7 @@ siesta_get_multiline(LENGTH 128
   Fortran_FLAGS_CURRENT
   OUTPUT Fortran_FLAGS_CURRENT_multiline
   )
+siesta_conda_fix(Fortran_FLAGS_CURRENT_multiline)
 
 # This isn't used since it may contain generator
 # expressions, and the multiline method can cut it
@@ -223,6 +224,7 @@ siesta_get_multiline(LENGTH 128
   Fortran_PPFLAGS_CURRENT
   OUTPUT Fortran_PPFLAGS_CURRENT_multiline
   )
+siesta_conda_fix(Fortran_PPFLAGS_CURRENT_multiline)
 
 # Create version file with the version string implemented
 # TODO this will only be generated at cmake generation, i.e.
