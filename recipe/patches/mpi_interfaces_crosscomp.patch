diff --git a/Config/cmake/SiestaPrintBuildInfo.cmake b/Config/cmake/SiestaPrintBuildInfo.cmake
index c5e902f3a..7b3e035d5 100644
--- a/Config/cmake/SiestaPrintBuildInfo.cmake
+++ b/Config/cmake/SiestaPrintBuildInfo.cmake
@@ -682,6 +682,31 @@ siesta_print_feature_info(
 
 siesta_print_end_section()
 
+siesta_print_start_section("Siesta specific options")
+
+siesta_print_feature_info(
+  NAME Suffixes
+  MSGON
+    "Handling the suffixes of the executables and libraries"
+  VARIABLES
+    SIESTA_SUFFIX
+    SIESTA_EXECUTABLE_SUFFIX
+    SIESTA_SHARED_LIBRARY_SUFFIX
+    SIESTA_STATIC_LIBRARY_SUFFIX
+  REQUIRED
+  )
+
+siesta_print_feature_info(
+  NAME Kinds
+  MSGON
+    "Cross-compiling and specification for kinds"
+  VARIABLES
+    SIESTA_INTEGER_KINDS
+    SIESTA_REAL_KINDS
+  REQUIRED
+  )
+
+siesta_print_end_section()
 
 # Empty line
 message(${_mode} "Done with build information")
diff --git a/INSTALL.md b/INSTALL.md
index 5f857cc25..352610076 100644
--- a/INSTALL.md
+++ b/INSTALL.md
@@ -515,6 +515,20 @@ profiling options are:
 The EXTRAE library by BSC can be used to generate MPI traces, but its configuration is not
 yet supported by the CMake build system. See the next section.
 
+### Cross compiling
+
+When cross-compiling Siesta one needs to pass the appropriate kinds for the compiler
+used. This is necessary because the auto-generated codes requires a pre-binary execution
+which cannot be done when cross-compiling.
+
+Simply define these flags
+```
+ -DSIESTA_INTEGER_KINDS="4;8" -DSIESTA_REAL_KINDS="4;8"
+```
+where one should change 4 and 8 with the appropriate integer32, integer64, real32 and
+real64 kinds. Then the binary executables will be omitted.
+
+
 ### Use of options not supported directly by CMake
 
 Some options are not yet supported directly by the CMake framework, but
diff --git a/Src/MPI/CMakeLists.txt b/Src/MPI/CMakeLists.txt
index bb6f806f2..be88bfded 100644
--- a/Src/MPI/CMakeLists.txt
+++ b/Src/MPI/CMakeLists.txt
@@ -4,6 +4,7 @@ add_library(mpi_siesta
   mpi_siesta.F90
   mpi_interfaces.F90
   mpi__include.f90
+  Interfaces_integer.f90
   Interfaces.f90
   )
 
@@ -32,7 +33,8 @@ siesta_suffix(
   NEW ""
   VARIABLES EXECUTABLE)
 
-# Create the int and kind explorer targets
+
+# Create integer kinds and interfaces
 add_executable(mpi_int_explorer
   # Do not default to build this one, it is only
   # a temporary build dependency
@@ -40,29 +42,37 @@ add_executable(mpi_int_explorer
   int_explorer.f90
   )
 
+
+string(REPLACE ";" " " SIESTA_INTEGER_KINDS_STR "${SIESTA_INTEGER_KINDS}")
+add_custom_command(
+  OUTPUT Interfaces_integer.f90
+  # Dependency targets
+  DEPENDS mpi_int_explorer
+  COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/generate_integer.sh ${SIESTA_INTEGER_KINDS_STR}
+  VERBATIM
+  COMMENT "Creating MPI interfaces and modules for integer kinds"
+  )
+
+
+# Create real kinds and interfaces
 add_executable(mpi_kind_explorer
-  # Do not default to build this one, it is only
-  # a temporary build dependency
   EXCLUDE_FROM_ALL
   kind_explorer.f90
   )
 
+string(REPLACE ";" " " SIESTA_REAL_KINDS_STR "${SIESTA_REAL_KINDS}")
+add_custom_command(
+  OUTPUT Interfaces.f90
+  DEPENDS mpi_kind_explorer
+  COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/generate_real.sh ${SIESTA_REAL_KINDS_STR}
+  VERBATIM
+  COMMENT "Creating MPI interfaces and modules for real, character and logical"
+  )
+
 # Restore the old suffix before using this one.
 siesta_suffix(
   POP
   VARIABLES EXECUTABLE)
 
-# By setting the OUTPUT line, we ensure that this generation command
-# is run before attempting to compile mpi_siesta
-  
-add_custom_command(
-  # These are output files generated by the generate.sh script
-  OUTPUT Interfaces.f90 VS.uses V_S.uses
-  # Dependency targets
-  DEPENDS mpi_int_explorer mpi_kind_explorer
-  COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/generate.sh
-  VERBATIM
-  COMMENT "Creating MPI interfaces and modules"
-  )
 
 
diff --git a/Src/MPI/generate_integer.sh b/Src/MPI/generate_integer.sh
new file mode 100644
index 000000000..238ccecfc
--- /dev/null
+++ b/Src/MPI/generate_integer.sh
@@ -0,0 +1,30 @@
+#!/bin/sh
+#
+### set -x
+dir=$(dirname $0)
+#
+echo " ===> Generating integer module files from templates..."
+
+if [ -z "$@" ] ; then
+    KINDS=$(./mpi_int_explorer | sed -e 's/,/ /g')
+else
+    KINDS=$@
+fi
+
+rm -rf V_S_integer.uses VS_integer.uses Interfaces_integer.f90
+
+echo $KINDS
+
+for kind in ${KINDS} ; do
+
+  echo "         USE MPI__i${kind}_V      ;  USE MPI__i${kind}_S" >> V_S_integer.uses
+  echo "         USE MPI__i${kind}_VS      ;  USE MPI__i${kind}_SV" >> VS_integer.uses
+
+for tag in v s sv vs ; do
+
+  sed -e "/_type/s//_i${kind}/" -e "/type/s//integer(${kind})/" \
+    "${dir}/mpi__type_${tag}.f90" >> Interfaces_integer.f90
+
+done
+
+done
diff --git a/Src/MPI/generate.sh b/Src/MPI/generate_real.sh
similarity index 53%
rename from Src/MPI/generate.sh
rename to Src/MPI/generate_real.sh
index 3f1c80861..7296b9be5 100644
--- a/Src/MPI/generate.sh
+++ b/Src/MPI/generate_real.sh
@@ -3,7 +3,7 @@
 ### set -x
 dir=$(dirname $0)
 #
-echo " ===> Generating module files from templates..."
+echo " ===> Generating real, logical, character module files from templates..."
 
 if [ -z "$@" ] ; then
     KINDS=$(./mpi_kind_explorer | sed -e 's/,/ /g')
@@ -11,48 +11,32 @@ else
     KINDS=$@
 fi
 
-INT_KINDS=$(./mpi_int_explorer | sed -e 's/,/ /g')
-#
-echo $KINDS
-rm -f *.uses Interfaces.f90
-
-for kind in ${KINDS} ; do
-
- echo "         USE MPI__r${kind}_V      ;  USE MPI__r${kind}_S" >> V_S.uses
- echo "         USE MPI__c${kind}_V      ;  USE MPI__c${kind}_S" >> V_S.uses
+rm -rf V_S_real.uses VS_real.uses Interfaces.f90
 
- echo "         USE MPI__r${kind}_VS      ;  USE MPI__r${kind}_SV" >> VS.uses
- echo "         USE MPI__c${kind}_VS     ;  USE MPI__c${kind}_SV" >> VS.uses
-
-done
+echo $KINDS
 
-for kind in ${INT_KINDS} ; do
+for tag in v s sv vs ; do
 
-  echo "         USE MPI__i${kind}_V      ;  USE MPI__i${kind}_S" >> V_S.uses
-  echo "         USE MPI__i${kind}_VS      ;  USE MPI__i${kind}_SV" >> VS.uses
+for kind in ${KINDS} ; do
 
-done
+ echo "         USE MPI__r${kind}_V      ;  USE MPI__r${kind}_S" >> V_S_real.uses
+ echo "         USE MPI__c${kind}_V      ;  USE MPI__c${kind}_S" >> V_S_real.uses
 
+ echo "         USE MPI__r${kind}_VS      ;  USE MPI__r${kind}_SV" >> VS_real.uses
+ echo "         USE MPI__c${kind}_VS     ;  USE MPI__c${kind}_SV" >> VS_real.uses
 
-for tag in v s sv vs ; do
 
-for kind in ${KINDS} ; do
-  sed -e "/_type/s//_r${kind}/" -e "/type/s//real(${kind})/" \
+ sed -e "/_type/s//_r${kind}/" -e "/type/s//real(${kind})/" \
     "${dir}/mpi__type_${tag}.f90" >> Interfaces.f90
-  sed -e "/_type/s//_c${kind}/" -e "/type/s//complex(${kind})/" \
+ sed -e "/_type/s//_c${kind}/" -e "/type/s//complex(${kind})/" \
     "${dir}/mpi__type_${tag}.f90" >> Interfaces.f90
 
 done
 
-for kind in ${INT_KINDS} ; do
-  sed -e "/_type/s//_i${kind}/" -e "/type/s//integer(${kind})/" \
-    "${dir}/mpi__type_${tag}.f90" >> Interfaces.f90
-done
-
 sed -e "/_type/s//_logical/" -e "/type/s//logical/" \
     "${dir}/mpi__type_${tag}.f90" >> Interfaces.f90
 
 sed -e "/_type/s//_character/" -e "/type/s//character(*)/" \
-    "${dir}/mpi__type_${tag}.f90"  >> Interfaces.f90
+    "${dir}/mpi__type_${tag}.f90" >> Interfaces.f90
 
 done
diff --git a/Src/MPI/mpi_interfaces.F90 b/Src/MPI/mpi_interfaces.F90
index 8bb351b7a..5cb50a802 100644
--- a/Src/MPI/mpi_interfaces.F90
+++ b/Src/MPI/mpi_interfaces.F90
@@ -33,7 +33,8 @@
         USE MPI__character_V  
         USE MPI__character_S
 
-        include "V_S.uses"
+        include "V_S_integer.uses"
+        include "V_S_real.uses"
 
 !       ... these are for two different-rank <choice> arguments ...
 
@@ -42,7 +43,8 @@
         USE MPI__character_VS 
         USE MPI__character_SV
 
-        include "VS.uses"
+        include "VS_integer.uses"
+        include "VS_real.uses"
 
 !       ... this is for *ALL* combinations of type/rank of SENDRECV ...
 !       USE MPI__sendrecv
